program : moduleDeclarations otherModules driverModule otherModules
moduleDeclarations : moduleDeclaration moduleDeclarations
moduleDeclarations : EMPTY
moduleDeclaration : DECLARE MODULE ID SEMICOL
otherModules : module otherModules
otherModules : EMPTY
driverModule : DRIVERDEF DRIVER PROGRAM DRIVERENDDEF moduleDef
module : DEF MODULE ID ENDDEF TAKES INPUT SQBO input_plist SQBC SEMICOL ret moduleDef
ret : RETURNS SQBO output_plist SQBC SEMICOL
ret : EMPTY
input_plist : ID COLON dataType input_plistNew
input_plistNew : COMMA ID COLON dataType input_plistNew
input_plistNew : EMPTY
output_plist : ID COLON type output_plistNew
output_plistNew : COMMA ID COLON type output_plistNew
output_plistNew : EMPTY
type : INTEGER
type : REAL
type : BOOLEAN
dataType : type
dataType : ARRAY SQBO range_arrays SQBC OF type
moduleDef : START statements END
statements : statement statements
statements : EMPTY
statement : ioStmt
statement : simpleStmt
statement : declareStmt
statement : condionalStmt
statement : iterativeStmt
ioStmt : GET_VALUE BO ID BC SEMICOL
ioStmt : PRINT BO var BC SEMICOL
whichId : SQBO index SQBC
whichId : EMPTY
index : NUM
index : ID
simpleStmt : assignmentStmt
simpleStmt : moduleReuseStmt
assignmentStmt : ID whichStmt
moduleReuseStmt : optional USE MODULE ID WITH PARAMETERS idList SEMICOL
optional : SQBO idList SQBC ASSIGNOP
optional : EMPTY
idList : ID idListNew
idListNew : COMMA ID idListNew
idListNew : EMPTY
expression : arithOrBoolExpr
expression : u
arithOrBoolExpr : relopExpr arithOrBoolExprNew
arithOrBoolExprNew : logicalOp relopExpr arithOrBoolExprNew
arithOrBoolExprNew : EMPTY
relopExpr : arithmeticExpr relopExprNew
relopExpr : boolConstt
relopExprNew : relationalOp arithmeticExpr
relopExprNew : EMPTY
arithmeticExpr : term arithmeticExprNew
arithmeticExprNew : pm term arithmeticExprNew
arithmeticExprNew : EMPTY
term : factor termNew
termNew : md factor termNew
termNew : EMPTY
factor : BO arithmeticExpr BC
factor : var_id_num
var : var_id_num
var : boolConstt
pm : PLUS
pm : MINUS
md : MUL
md : DIV
logicalOp : AND
logicalOp : OR
relationalOp : LT
relationalOp : LE
relationalOp : GT
relationalOp : GE
relationalOp : EQ
relationalOp : NE
declareStmt : DECLARE idList COLON dataType SEMICOL
condionalStmt : SWITCH BO ID BC START caseStmts default END
caseStmts : CASE value COLON statements BREAK SEMICOL caseStmtsNew
caseStmtsNew : CASE value COLON statements BREAK SEMICOL caseStmtsNew
caseStmtsNew : EMPTY
value : NUM
value : TRUE
value : FALSE
default : DEFAULT COLON statements BREAK SEMICOL
default : EMPTY
iterativeStmt : FOR BO ID IN range BC START statements END
iterativeStmt : WHILE BO arithOrBoolExpr BC START statements END
range : NUM RANGEOP NUM
range_arrays : index RANGEOP index
boolConstt : TRUE
boolConstt : FALSE
var_id_num : ID whichId
var_id_num : NUM
var_id_num : RNUM
whichStmt : lvalueIDStmt
whichStmt : lvalueARRStmt
lvalueIDStmt : ASSIGNOP expression SEMICOL
lvalueARRStmt : SQBO index SQBC ASSIGNOP expression SEMICOL
u : unary_op new_NT
unary_op : PLUS
unary_op : MINUS
new_NT : BO arithmeticExpr BC
new_NT : var_id_num

****** First Sets ******
program:    DECLARE DEF DRIVERDEF 
moduleDeclarations:    EMPTY DECLARE 
moduleDeclaration:    DECLARE 
otherModules:    EMPTY DEF 
driverModule:    DRIVERDEF 
module:    DEF 
ret:    EMPTY RETURNS 
input_plist:    ID 
input_plistNew:    EMPTY COMMA 
output_plist:    ID 
output_plistNew:    EMPTY COMMA 
type:    INTEGER REAL BOOLEAN 
dataType:    INTEGER REAL BOOLEAN ARRAY 
moduleDef:    START 
statements:    EMPTY DECLARE GET_VALUE PRINT USE FOR SWITCH WHILE SQBO ID 
statement:    DECLARE GET_VALUE PRINT USE FOR SWITCH WHILE SQBO ID 
ioStmt:    GET_VALUE PRINT 
whichId:    EMPTY SQBO 
index:    NUM ID 
simpleStmt:    USE SQBO ID 
assignmentStmt:    ID 
moduleReuseStmt:    USE SQBO 
optional:    EMPTY SQBO 
idList:    ID 
idListNew:    EMPTY COMMA 
expression:    TRUE FALSE PLUS MINUS BO NUM RNUM ID 
arithOrBoolExpr:    TRUE FALSE BO NUM RNUM ID 
arithOrBoolExprNew:    EMPTY AND OR 
relopExpr:    TRUE FALSE BO NUM RNUM ID 
relopExprNew:    EMPTY LT LE GE GT EQ NE 
arithmeticExpr:    BO NUM RNUM ID 
arithmeticExprNew:    EMPTY PLUS MINUS 
term:    BO NUM RNUM ID 
termNew:    EMPTY MUL DIV 
factor:    BO NUM RNUM ID 
var:    TRUE FALSE NUM RNUM ID 
pm:    PLUS MINUS 
md:    MUL DIV 
logicalOp:    AND OR 
relationalOp:    LT LE GE GT EQ NE 
declareStmt:    DECLARE 
condionalStmt:    SWITCH 
caseStmts:    CASE 
caseStmtsNew:    EMPTY CASE 
value:    TRUE FALSE NUM 
default:    EMPTY DEFAULT 
iterativeStmt:    FOR WHILE 
range:    NUM 
range_arrays:    NUM ID 
boolConstt:    TRUE FALSE 
var_id_num:    NUM RNUM ID 
whichStmt:    ASSIGNOP SQBO 
lvalueIDStmt:    ASSIGNOP 
lvalueARRStmt:    SQBO 
u:    PLUS MINUS 
unary_op:    PLUS MINUS 
new_NT:    BO NUM RNUM ID 

****** Follow Sets ******
program:    DOLLAR 
moduleDeclarations:    DEF DRIVERDEF 
moduleDeclaration:    DECLARE DEF DRIVERDEF 
otherModules:    DRIVERDEF DOLLAR 
driverModule:    DEF DOLLAR 
module:    DEF DRIVERDEF DOLLAR 
ret:    START 
input_plist:    SQBC 
input_plistNew:    SQBC 
output_plist:    SQBC 
output_plistNew:    SQBC 
type:    SEMICOL COMMA SQBC 
dataType:    SEMICOL COMMA SQBC 
moduleDef:    DEF DRIVERDEF DOLLAR 
statements:    END BREAK 
statement:    END DECLARE GET_VALUE PRINT USE FOR SWITCH BREAK WHILE SQBO ID 
ioStmt:    END DECLARE GET_VALUE PRINT USE FOR SWITCH BREAK WHILE SQBO ID 
whichId:    AND OR PLUS MINUS MUL DIV LT LE GE GT EQ NE SEMICOL BC 
index:    RANGEOP SQBC 
simpleStmt:    END DECLARE GET_VALUE PRINT USE FOR SWITCH BREAK WHILE SQBO ID 
assignmentStmt:    END DECLARE GET_VALUE PRINT USE FOR SWITCH BREAK WHILE SQBO ID 
moduleReuseStmt:    END DECLARE GET_VALUE PRINT USE FOR SWITCH BREAK WHILE SQBO ID 
optional:    USE 
idList:    COLON SEMICOL SQBC 
idListNew:    COLON SEMICOL SQBC 
expression:    SEMICOL 
arithOrBoolExpr:    SEMICOL BC 
arithOrBoolExprNew:    SEMICOL BC 
relopExpr:    AND OR SEMICOL BC 
relopExprNew:    AND OR SEMICOL BC 
arithmeticExpr:    AND OR LT LE GE GT EQ NE SEMICOL BC 
arithmeticExprNew:    AND OR LT LE GE GT EQ NE SEMICOL BC 
term:    AND OR PLUS MINUS LT LE GE GT EQ NE SEMICOL BC 
termNew:    AND OR PLUS MINUS LT LE GE GT EQ NE SEMICOL BC 
factor:    AND OR PLUS MINUS MUL DIV LT LE GE GT EQ NE SEMICOL BC 
var:    BC 
pm:    BO NUM RNUM ID 
md:    BO NUM RNUM ID 
logicalOp:    TRUE FALSE BO NUM RNUM ID 
relationalOp:    BO NUM RNUM ID 
declareStmt:    END DECLARE GET_VALUE PRINT USE FOR SWITCH BREAK WHILE SQBO ID 
condionalStmt:    END DECLARE GET_VALUE PRINT USE FOR SWITCH BREAK WHILE SQBO ID 
caseStmts:    END DEFAULT 
caseStmtsNew:    END DEFAULT 
value:    COLON 
default:    END 
iterativeStmt:    END DECLARE GET_VALUE PRINT USE FOR SWITCH BREAK WHILE SQBO ID 
range:    BC 
range_arrays:    SQBC 
boolConstt:    AND OR SEMICOL BC 
var_id_num:    AND OR PLUS MINUS MUL DIV LT LE GE GT EQ NE SEMICOL BC 
whichStmt:    END DECLARE GET_VALUE PRINT USE FOR SWITCH BREAK WHILE SQBO ID 
lvalueIDStmt:    END DECLARE GET_VALUE PRINT USE FOR SWITCH BREAK WHILE SQBO ID 
lvalueARRStmt:    END DECLARE GET_VALUE PRINT USE FOR SWITCH BREAK WHILE SQBO ID 
u:    SEMICOL 
unary_op:    BO NUM RNUM ID 
new_NT:    SEMICOL 

 ****** Parse Table ******

Lexical Analysis is being initialized
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 30 bytes
Loaded a block from the source code file of size: 24 bytes
Loaded a block from the source code file of size: 0 bytes
DECLARE                program   0
program --> moduleDeclarations	otherModules	driverModule	otherModules	
DECLARE                moduleDeclarations   1
moduleDeclarations --> moduleDeclaration	moduleDeclarations	
DECLARE                moduleDeclaration   3
moduleDeclaration --> DECLARE	MODULE	ID	SEMICOL	
DECLARE                DECLARE                
MODULE                MODULE                
ID                ID                
SEMICOL                SEMICOL                
DRIVERDEF                moduleDeclarations   2
moduleDeclarations --> EMPTY	
DRIVERDEF                otherModules   5
otherModules --> EMPTY	
DRIVERDEF                driverModule   6
driverModule --> DRIVERDEF	DRIVER	PROGRAM	DRIVERENDDEF	moduleDef	
DRIVERDEF                DRIVERDEF                
DRIVER                DRIVER                
PROGRAM                PROGRAM                
DRIVERENDDEF                DRIVERENDDEF                
START                moduleDef   21
moduleDef --> START	statements	END	
START                START                
DECLARE                statements   22
statements --> statement	statements	
DECLARE                statement   26
statement --> declareStmt	
DECLARE                declareStmt   75
declareStmt --> DECLARE	idList	COLON	dataType	SEMICOL	
DECLARE                DECLARE                
ID                idList   41
idList --> ID	idListNew	
ID                ID                
COMMA                idListNew   42
idListNew --> COMMA	ID	idListNew	
COMMA                COMMA                
ID                ID                
COMMA                idListNew   42
idListNew --> COMMA	ID	idListNew	
COMMA                COMMA                
ID                ID                
COLON                idListNew   43
idListNew --> EMPTY	
COLON                COLON                
INTEGER                dataType   19
dataType --> type	
INTEGER                type   16
type --> INTEGER	
INTEGER                INTEGER                
SEMICOL                SEMICOL                
END                statements   23
statements --> EMPTY	
END                END                
DEF                otherModules   4
otherModules --> module	otherModules	
DEF                module   7
module --> DEF	MODULE	ID	ENDDEF	TAKES	INPUT	SQBO	input_plist	SQBC	SEMICOL	ret	moduleDef	
DEF                DEF                
MODULE                MODULE                
ID                ID                
ENDDEF                ENDDEF                
TAKES                TAKES                
INPUT                INPUT                
SQBO                SQBO                
ID                input_plist   10
input_plist --> ID	COLON	dataType	input_plistNew	
ID                ID                
COLON                COLON                
INTEGER                dataType   19
dataType --> type	
INTEGER                type   16
type --> INTEGER	
INTEGER                INTEGER                
COMMA                input_plistNew   11
input_plistNew --> COMMA	ID	COLON	dataType	input_plistNew	
COMMA                COMMA                
ID                ID                
COLON                COLON                
INTEGER                dataType   19
dataType --> type	
INTEGER                type   16
type --> INTEGER	
INTEGER                INTEGER                
COMMA                input_plistNew   11
input_plistNew --> COMMA	ID	COLON	dataType	input_plistNew	
COMMA                COMMA                
ID                ID                
COLON                COLON                
INTEGER                dataType   19
dataType --> type	
INTEGER                type   16
type --> INTEGER	
INTEGER                INTEGER                
SQBC                input_plistNew   12
input_plistNew --> EMPTY	
SQBC                SQBC                
SEMICOL                SEMICOL                
RETURNS                ret   8
ret --> RETURNS	SQBO	output_plist	SQBC	SEMICOL	
RETURNS                RETURNS                
SQBO                SQBO                
ID                output_plist   13
output_plist --> ID	COLON	type	output_plistNew	
ID                ID                
COLON                COLON                
BOOLEAN                type   18
type --> BOOLEAN	
BOOLEAN                BOOLEAN                
COMMA                output_plistNew   14
output_plistNew --> COMMA	ID	COLON	type	output_plistNew	
COMMA                COMMA                
ID                ID                
COLON                COLON                
INTEGER                type   16
type --> INTEGER	
INTEGER                INTEGER                
COMMA                output_plistNew   14
output_plistNew --> COMMA	ID	COLON	type	output_plistNew	
COMMA                COMMA                
ID                ID                
COLON                COLON                
REAL                type   17
type --> REAL	
REAL                REAL                
SQBC                output_plistNew   15
output_plistNew --> EMPTY	
SQBC                SQBC                
SEMICOL                SEMICOL                
START                moduleDef   21
moduleDef --> START	statements	END	
START                START                
ID                statements   22
statements --> statement	statements	
ID                statement   25
statement --> simpleStmt	
ID                simpleStmt   35
simpleStmt --> assignmentStmt	
ID                assignmentStmt   37
assignmentStmt --> ID	whichStmt	
ID                ID                
ASSIGNOP                whichStmt   94
whichStmt --> lvalueIDStmt	
ASSIGNOP                lvalueIDStmt   96
lvalueIDStmt --> ASSIGNOP	expression	SEMICOL	
ASSIGNOP                ASSIGNOP                
BO                expression   44
expression --> arithOrBoolExpr	
BO                arithOrBoolExpr   46
arithOrBoolExpr --> relopExpr	arithOrBoolExprNew	
BO                relopExpr   49
relopExpr --> arithmeticExpr	relopExprNew	
BO                arithmeticExpr   53
arithmeticExpr --> term	arithmeticExprNew	
BO                term   56
term --> factor	termNew	
BO                factor   59
factor --> BO	arithmeticExpr	BC	
BO                BO                
TRUE                arithmeticExpr   -1
Syntactic Error on line 12:arithmeticExpr
Expected BO NUM RNUM ID 
END                statements   23
statements --> EMPTY	
END                END                
DOLLAR                otherModules   5
otherModules --> EMPTY	
DOLLAR                DOLLAR                
Input source code is syntactically correct.
