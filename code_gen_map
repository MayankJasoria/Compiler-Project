This might be helpful: https://www.cs.uaf.edu/2005/fall/cs301/support/x86/nasm.html

To compile nasm programs:
    nasm -f elf <file_name>.asm
To link files using gcc (on 64 bits systems) (Requires global main):
    gcc -m32 <file_name>.o -o <file_name>

To link files using gcc (on 32 bits systems) (Requires global main):
    gcc <file_name>.o -o <file_name>    

To link files using ld (Requires global _start):
    ld -m elf_i386 <file_name>.o -o <out_file_name>

To run the compiled program:    
./<out_file_name>

traverseAST(): {
    switch on type pf AST node: {
        AST_NODE_PROGRAM:  {
            /* init text and data section here */
            section .data
            ;define all the variables here 
            section .text
            global main ;NOTE: In case you are linking with ld, use _start. Use main when linking with gcc
        }
        AST_NODE_MODULEDECLARATION: {
            /* Helps only in construction of symbol table */
        }
        AST_NODE_MODULELIST: {
            /* Helps in AST traversal */
        }
        AST_NODE_MODULE: {
            /* start module definition. Get SymbolTableFunc for this module 
                It is assumed that the caller has pushed the relevant arguments into the stack, and has pushed 
                the address of the arguments at the end. Also, ebp points to the start of the stack frame */
            %module_name:
                /* Everything can be accessed in the stack frame */
                ;Do stuff    
        }
        AST_NODE_INPUTLIST: {
            /* Helps only in construction of symbol table */
        }
        AST_NODE_OUTPUTLIST: {
            /* Helps only in construction of symbol table */
        }
        AST_NODE_ARRAY: {

        }
        AST_NODE_RANGEARRAYS:
        AST_NODE_STATEMENT:
        AST_NODE_IO:
        AST_NODE_SIMPLESTMT:
        AST_NODE_ASSIGN:
        AST_NODE_MODULEREUSE:
        AST_NODE_IDLIST:
        AST_NODE_EXPR:
        AST_NODE_AOBEXPR:
        AST_NODE_DECLARESTMT:
        AST_NODE_CONDSTMT:
        AST_NODE_CASESTMT:
        AST_NODE_UNARY:
        AST_NODE_LVALARRSTMT:
        AST_NODE_ITERSTMT:
        AST_NODE_VARIDNUM:
        AST_NODE_LEAF: {
            switch on leaf type: {
                AST_LEAF_INT:
                AST_LEAF_RNUM:
                AST_LEAF_BOOL:
                AST_LEAF_ID: {
                    switch on parent type {
                        AST_NODE_MODULEDECLARATION:
                        AST_NODE_MODULE:
                        AST_NODE_INPUTLIST:
                        AST_NODE_OUTPUTLIST:
                        AST_NODE_IO:
                        AST_NODE_VARIDNUM:
                        AST_NODE_LVALARRSTMT:
                        AST_NODE_ASSIGN:
                        AST_NODE_MODULEREUSE:
                        AST_NODE_IDLIST:
                        AST_NODE_CONDSTMT:
                        AST_NODE_ITERSTMT:
                    }
                }
                AST_LEAF_NUM:
                AST_LEAF_IDXNUM:
                AST_LEAF_IDXID:
                AST_LEAF_PLUS:
                AST_LEAF_MINUS:
                AST_LEAF_MUL:
                AST_LEAF_DIV:
                AST_LEAF_OR:
                AST_LEAF_AND:
                AST_LEAF_LT:
                AST_LEAF_LE:
                AST_LEAF_GT:
                AST_LEAF_GE:
                AST_LEAF_EQ:
                AST_LEAF_NE:
                AST_LEAF_TRUE:
                AST_LEAF_FALSE:
                AST_LEAF_VALNUM:
                AST_LEAF_VALTRUE:
                AST_LEAF_VALFALSE:
                AST_LEAF_VARIDNUM_NUM:
                AST_LEAF_VARIDNUM_ID:
                AST_LEAF_VARIDNUM_RNUM:
                AST_LEAF_BOOLTRUE:
                AST_LEAF_BOOLFALSE:
                AST_LEAF_UOPPLUS:
                AST_LEAF_UOPMINUS:
                default:
            }

        }
    }
}
