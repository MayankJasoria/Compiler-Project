declare module add;
declare module fun2;

<<module swap>>
takes input[A: array [m..n] of real, m: real, st:integer, en:integer];
returns [b:boolean];
start
	declare i:integer;
	i := st;
	while(i <= en)
	start
		declare tmp:real;
		tmp := A[i];
		[tmp] := use module add with parameters tmp, m;
		A[i] := tmp;
		i := i + 1;
	end
	b := i <= en;
end

<<module add>>
takes input[tmp: real, m: real];
returns [r:real];
start
	r := tmp + m;
end

<<module fun1>>
takes input[arr:array[tmp..tmp2] of real, arr2:array[tmp2..tmp] of integer, arr3: array[tmp..tmp] of real, sw1: integer];
start
	declare m, n, i:integer;
	get_value(m);
	get_value(n);
	switch(sw1)
	start
		case 1:
			declare dyn : array[m..n] of real;
			get_value(dyn);
			while(sw1 < 5)
			start
				declare tmp1, tmp2: real;
				tmp1 := arr[sw1];
				tmp2 := dyn[sw1];
				[tmp1] := use module add with parameters tmp1, tmp2;
				arr[sw1] := tmp1;
				arr3[sw1] := -(tmp1 + 4.15);
				sw1 := sw1 + 1;
			end
			break;
		case 2:
			print(arr2);
			[sw1] := use module fun2 with parameters arr2;
			for(i in 2..4)
			start
				declare p:integer;
				p := 1 + i;
				print(p);
			end
			print(arr2);
			break;
		default:
			break;
	end
	print(sw1);
end
	
<<module fun2>>
takes input[A:array[tmp..tmp] of integer];
returns [mul: integer]; 
start
	declare m, n:integer;
	get_value(m);
	get_value(n);
	declare dyn : array[m..n] of integer;
	get_value(dyn);
	A := dyn;
	print(dyn);
	mul := A[m];
end

<<<driver program>>>
start
	** use swap once and the functions below once **
	declare m, n, sw1: integer;
	sw1 := 2; 
	get_value(m);
	get_value(n);
	declare A: array[m..n] of real;
	declare B: array[m..n] of integer;
	declare C: array[m..n] of real;
	get_value(A);
	get_value(B);
	get_value(C);
	use module fun1 with parameters A, B, C, sw1;
	print(B);
	**print(A);
	print(C);**
end


**
Input: Enter an Integer Value
5
Input: Enter an Integer Value
10
Input: Enter 6 array elements of Real Number type for range 5 to 10
3.45
1.90
9.12
9021.1
-904.123
1.23
Input: Enter an Real Number Value
2.0
Output: 5.450000 3.900000 11.120000 9023.099609 -902.122986 3.230000
Output: false
**


**
Input: Enter an Integer Value
1
Input: Enter an Integer Value
4
Input: Enter 4 array elements of Real Number type for range 1 to 4
1.34
2.11
-1.69
9.123
Input: Enter 4 array elements of Integer type for range 1 to 4
12
13
1
3
Input: Enter 4 array elements of Real Number type for range 1 to 4
5
23.32
12.321
9.291
Input: Enter an Integer Value
1
Input: Enter an Integer Value
4
Input: Enter 4 array elements of Real Number type for range 1 to 4
-9323.32
-232990.1
1.21
0
Output: 5
Output: -9321.980469 -232987.984375 -0.480000 9.123000
Output: 9317.830078 232983.828125 -3.670000 -13.273001
**

**
Input: Enter an Integer Value
1
Input: Enter an Integer Value
4
Input: Enter 4 array elements of Real Number type for range 1 to 4
1
1
1
1
Input: Enter 4 array elements of Integer type for range 1 to 4
1
2
3
4
Input: Enter 4 array elements of Real Number type for range 1 to 4
1
1
1
1
Input: Enter an Integer Value
1
Input: Enter an Integer Value
4
Output: 1 2 3 4
Input: Enter an Integer Value
1
Input: Enter an Integer Value
4
Input: Enter 4 array elements of Integer type for range 1 to 4
9
8
7
6
Output: 9 8 7 6
Output: 3
Output: 4
Output: 5
Output: 1 2 3 4
Output: 9
Output: 1 2 3 4
**