 <program>			--> <moduleDeclarations> <otherModules> <driverModule>   <otherModules>
<moduleDeclarations>	--> <moduleDeclaration> <moduleDeclarations> 
			  | Ɛ
<moduleDeclaration>	--> DECLARE MODULE ID SEMICOL
<otherModules>		--> <module> <otherModules>
			  | Ɛ
<driverModule>		--> DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module>		--> DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret> <moduleDef>
<ret>			--> RETURNS SQBO <output_plist> SQBC SEMICOL
			  | Ɛ
<input_plist>		--> ID COLON <dataType> <input_plistNew>
<input_plistNew>	--> COMMA ID COLON <dataType> <input_plistNew>
			  | Ɛ
<output_plist>		--> ID COLON <type> <output_plistNew>
<output_plistNew>	--> COMMA ID COLON <type> <output_plistNew>
			  | Ɛ
<type>			--> INTEGER
			  | REAL
			  | BOOLEAN
<dataType>		--> <type>
			  | ARRAY SQBO <range> SQBC OF <type>
<moduleDef>		--> START <statements> END
<statements>		--> <statement> <statements>
			  | Ɛ
<statement>		--> <ioStmt>
			  | <simpleStmt>
			  | <declareStmt>
			  | <condionalStmt>
			  | <iterativeStmt>
<ioStmt>		--> GET_VALUE BO ID <whichId> BC SEMICOL
			  | PRINT BO <expression> BC SEMICOL
<whichId>		--> SQBO <index> SQBC
			  | Ɛ
<index>			--> NUM
			  | ID
<simpleStmt>		--> <assignmentStmt>
			  | <moduleReuseStmt>
<assignmentStmt>	--> ID <whichId> ASSIGNOP <expression> SEMICOL
<moduleReuseStmt>	--> <optional> USE MODULE ID WITH PARAMETERS <idList> SEMICOL
<optional>		--> SQBO <idList> SQBC ASSIGNOP
			  | Ɛ
<idList>		--> ID <idListNew>
<idListNew>		--> COMMA ID <idListNew>
			  | Ɛ 
<expression>		--> <arithOrBoolExpr>
			  | MINUS BO <arithmeticExpr> BC
			  | PLUS BO <arithmeticExpr> BC
			  | PLUS <var>
			  | MINUS <var>
<arithOrBoolExpr> 	--> <relopExpr> <arithOrBoolExprNew>
<arithOrBoolExprNew> 	--> <logicalOp> <relopExpr> <arithOrBoolExprNew>
			  | Ɛ
<relopExpr> 		--> <arithmeticExpr> <relopExprNew>
<relopExprNew> 		--> <relationalOp> <arithmeticExpr> <relopExprNew>
			  | Ɛ
<arithmeticExpr>	--> <term> <arithmeticExprNew>
<arithmeticExprNew>	--> <pm> <term> <arithmeticExprNew>
			  | Ɛ 
<term>			--> <factor> <termNew>
<termNew>		--> <md> <factor> <termNew>
			  | Ɛ
<factor>		--> BO <arithmeticExpr> BC
			  | <var>
<var>			--> ID <whichId>
			  | NUM
			  | RNUM
			  | TRUE
			  | FALSE
<pm>			--> PLUS
			  | MINUS
<md>			--> MUL
			  | DIV
<logicalOp>		--> AND
			  | OR
<relationalOp>		--> LT
			  | LE
			  | GT
			  | GE
			  | EQ
			  | NE
<declareStmt>		--> DECLARE <idList> COLON <dataType> SEMICOL
<condionalStmt>		--> SWITCH BO ID BC START <caseStmts> <default> END 
<caseStmts>		--> CASE <value> COLON <statements> BREAK SEMICOL <caseStmtsNew>
<caseStmtsNew>		--> CASE <value> COLON <statements> BREAK SEMICOL <caseStmtsNew>
			  | Ɛ
<value>			--> NUM
			  | TRUE
			  | FALSE
<default>		--> DEFAULT COLON <statements> BREAK SEMICOL
			  | Ɛ
<iterativeStmt>		--> FOR BO ID IN <range> BC START <statements> END
			  | WHILE BO <arithOrBoolExpr> BC START <statements> END
<range>			--> NUM RANGEOP NUM