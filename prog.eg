declare module readArr;
declare module d;
declare module arrRead;

<<module arraySum>>
takes input[list:array[1..15] of    real, n:integer];
returns  [sum:real];
start
	declare index:integer;
	declare t:boolean;
	sum:=0.0;
	[sum] := use module arraySum with parameters index, i;  ** recursive call**
	[t] := use module readArr with parameters index;
	for(index in  1..15)
	start
		t:= index<=n;
		
		index:=index+8;
		
		declare index: boolean;
		switch(index)
		start
		case true: print(list[index]);
			   sum:=sum+list[index];
			   break;
		case false: print(sum);
			    print(index);
			    **prints the values of sum and index  15-n times**
			    break;
		end
		
		index:= 5;
	end
	print(sum);
end

<<<driver program>>>
start
	declare A:array[1..15] of real;
	declare k:integer;
	declare s:real;
	get_value(k);
	use module readArr with parameters A,k;
	[s]:= use module arraySum with parameters A,k;
	print(s);
end


<<module readArr>>
takes input [arr1:array[1..15] of real,k:integer];
start
	declare tempvar:real;
	declare i:integer;
	i:=1;
	while(i<=k)
	start
		get_value(tempvar);
		arr1[i]:=tempvar;
		i:=i+1;
		** the semantics of while needs an increment and will be taken care of at the second phase**
	end
end

<<module d>> takes input [i: real, v: integer];
start
	declare s:real;
	declare dv:integer;
	declare aaa: array[34..50] of integer;
	declare mn:array[87..99] of real;

	while(aaa)
	start
		declare rr:real;
		aaa:= s - 20;
		dv := -6;

	end	
end